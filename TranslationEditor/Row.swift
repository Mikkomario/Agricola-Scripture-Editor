//
//  Row.swift
//  TranslationEditor
//
//  Created by Mikko Hilpinen on 30.11.2016.
//  Copyright Â© 2016 Mikko Hilpinen. All rights reserved.
//

import Foundation

// Rows are used for wrapping CBLQueryRows into a more accessible format
class Row<V: View>
{
	// ATTRIBUTES	-------
	
	// The value of the row (generated by view)
	let rawValue: Any?
	let value: PropertyValue
	private let row: CBLQueryRow
	
	private var _keys: [String : PropertyValue]?
	private var _object: V.Queried?
	
	// The keys + values for this row (lazily initialized)
	var keys: [String : PropertyValue]
	{
		if _keys == nil
		{
			_keys = [String : PropertyValue]()
			
			for keyName in V.keyNames
			{
				let value = PropertyValue.of(row.key(at: V.indexOfKey(keyName)!)).or(PropertyValue.empty)
				_keys![keyName] = value
			}
		}
		
		return _keys!
	}
	
	// The document id of this row
	var id: String? { return row.documentID }
	
	// The parsed object for this row. Lazily initialized, may fail
	func object() throws -> V.Queried
	{
		if _object == nil
		{
			if let id = id
			{
				var properties: [String : Any]!
				if let preProperties = row.documentProperties
				{
					properties = preProperties
				}
				else if let documentProperties = row.document?.properties
				{
					properties = documentProperties
				}
				else
				{
					throw RowParseError.documentPropertiesMissing
				}
				
				_object = try V.Queried.create(from: PropertySet(properties), withId: V.Queried.createId(from: id))
			}
			else
			{
				throw RowParseError.documentIdMissing
			}
		}
		
		return _object!
	}
	
	
	// SUBSCRIPT	-------
	
	// Finds the value for a certain key
	subscript(keyName: String) -> PropertyValue
	{
		return keys[keyName].or(PropertyValue.empty)
	}
	
	
	// INIT	---------------
	
	init(_ row: CBLQueryRow)
	{
		self.row = row
		
		// Parses the row value
		self.rawValue = row.value
		if let rowValue = row.value as? PropertyValue
		{
			value = rowValue
		}
		else if let rowValue = PropertyValue.of(row.value)
		{
			value = rowValue
		}
		else
		{
			value = PropertyValue.empty
		}
	}
}
